
#***************************************************************************************************
# values used for this app
#***************************************************************************************************
disc:
  description: "blah blah"
  title: "Rattle and Hum" # @Autowired Environment env
                          # @Value("${disc.title}") or env.getProperty("disc.title");
  artist: "U2"
  
vince.staple.performance:
  city: "Long Beach"
  state: "California"
  country: "US"


  
#***************************************************************************************************
# Boot Security
# http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-security.html
# default user name is "user", the password is "pwd"
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
#***************************************************************************************************
security:
  basic:
    enabled: true
    #enabled: false
  user:
    name: user
    password: pwd
#***************************************************************************************************
# Boot LOGGING
# https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
#***************************************************************************************************
logging:
  level:
    org.springframework.web: DEBUG
    com.beth.tdd.ztddmvc: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file: /Users/dragon/workspace/stsws/cf-ms1/ztdd-rest-unittest-2-boot/logs/ztdd-rest-unittest-2-boot.log

#***************************************************************************************************
# Spring MVC - prefix is under /src/main/webapp/WEB-INF/jsp
#***************************************************************************************************
spring.mvc.view.prefix: /WEB-INF/jsp/
spring.mvc.view.suffix: .jsp

#***************************************************************************************************
# PROFILE ACTIVE IS SET TO "dev" - PROFILE ACTIVE IS SET TO "dev"
# Setting the ACTIVE PROFILE and default database if neither profile "dev" or "test" is used
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
#***************************************************************************************************  
spring:
  profiles.active: dev # this is the active profile if deployed in traditional env.  However,
                       # when app is pushed to pcfdev, the java buildpack will auto-reconfigure
                       # this profile settings to run in Cloud Foundry (pcfdev) environment

  # HOW TO INITIALIZE DATABASE
  # https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html
  #  a file named import.sql in the root of the classpath will be executed on startup if Hibernate 
  # creates the schema from scratch (that is if the ddl-auto property is set to create or create-drop). 
  # This can be useful for demos and for testing if you are careful, but probably not something you want
  # to be on the classpath in production. It is a Hibernate feature (nothing to do with Spring).
  
  # the H2 datasource IS USED when junit is running (ie profile is NEITHER dev NOR test)
  # or when profile is set to value other than "dev" or "test"
  datasource:
    url: jdbc:h2:mem:AZ;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password:
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect    
    hibernate:
      # HOW TO INITIALIZE DATABASE
      # https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html
      #  a file named import.sql in the root of the classpath will be executed on startup if Hibernate 
      # creates the schema from scratch (that is if the ddl-auto property is set to create or create-drop). 
      # This can be useful for demos and for testing if you are careful, but probably not something you want
      # to be on the classpath in production. It is a Hibernate feature (nothing to do with Spring).    
      ddl-auto: create-drop
    # jpa logging
    properties:
      hibernate:
        show_sql: true
        format_sql: true 



#***************************************************************************************************
# SETUP EXTERNAL DATABASE mysql to be used when spring.profiles.active is set to either "dev" or "test"
#***************************************************************************************************
# Boot SQL database
# mysql.server start
# mysql -uroot -p (enter rootpass)
# create database test;
# create database dev;
# create user 'dbuser'@'localhost' identified by 'dbpass';
# grant all privileges on test.* to 'dbuser'@'localhost';
#
# mysql -udbuser -p (enter dbpass)
# use test;



#***************************************************************************************************
# SETUP VARIOUS PROFILES ----PROFILES-----PROFILES
#   NON-CLOUD profiles: dev, test
#       CLOUD profiles: first-cloud-profile, configure-datasource-for-cloud
#***************************************************************************************************
# Various profiles are set below
# Here are profile "dev", DataSource properties
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# spring-boot DataSource configuration is controlled by external configuration properties 
# prefixed with spring.datasource.*
# https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-sql.html#boot-features-connect-to-production-database
#***************************************************************************************************

#***************************************************************************************************
# NON-CLOUD profile "dev"
# Here are profile "dev", DataSource properties
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
#***************************************************************************************************
# THIS IS profile for "dev"
---
spring:
  profiles: dev 
  datasource:
      url: jdbc:mysql://localhost:3306/dev
      username: dbuser
      password: dbpass
      driver-class-name: com.mysql.jdbc.Driver
      tomcat:
        test-on-borrow: true
      tomcat.max-wait: 10000
      tomcat.max-active: 50
  jpa:
    database-platform: org.hibernate.dialect.MySQL5Dialect
    # when app is started with ddl-auto=update, if table not found, table will be created.
    # if table has changes, table will be updated
    # import.sql will not be imported, it will be ignore with ddl-auto=update    
    hibernate:
      ddl-auto: update
    # jpa logging
    properties:
      hibernate:
        show_sql: true
        format_sql: true      
#***************************************************************************************************
# NON-CLOUD profile "test"
# Here are profile "test", DataSource properties
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
#***************************************************************************************************
# THIS IS profile for "test"
---
spring:
  profiles: test
  datasource:
      url: jdbc:mysql://localhost:3306/test
      username: dbuser
      password: dbpass
      driver-class-name: com.mysql.jdbc.Driver
      tomcat:
        test-on-borrow: true
      tomcat.max-wait: 10000
      tomcat.max-active: 50      
  jpa:
    database-platform: org.hibernate.dialect.MySQL5Dialect
    # when app is started with ddl-auto=update, if table not found, table will be created.
    # if table has changes, table will be updated
    # import.sql will not be imported, it will be ignore with ddl-auto=update    
    hibernate:
      ddl-auto: update   
    # jpa logging
    properties:
      hibernate:
        show_sql: true
        format_sql: true   
     
#***************************************************************************************************
# CLOUD PROFILES: here are two cloud profiles that can be used when deployed to Cloud Foundry
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
#***************************************************************************************************
# THIS IS profile for "cloud"
# without this profile, you'll not see "todos" table in the provisioned p-mysql instance 
# when using dbvisualizer
# when deployed in Cloud Foundry, the buildpack will recognize and honor this "cloud" spring profile.
# The buildpack will then auto reconfigure the DataSource, EntityManager to use the "bound" sql service instance
# specified in manifest.yml.
# Developer does not need to code anything for this auto reconfigure to happen.
# However, if you want to set anything specific regarding the connection to the provisioned service instance,
# spring cloud can help
# https://spring.io/blog/2015/04/27/binding-to-data-services-with-spring-boot-in-cloud-foundry  
# I have tried to programmatically create DataSource following the above blog, but it does not work  

#***************************************************************************************************
# CLOUD profile "first-cloud-profile"
#***************************************************************************************************

---

spring:
  profiles: whatever1 # when deploy app to CF - this profile setting is working
  jpa:
    generate-ddl: true
  datasource:
    tomcat:
      max-active: 50 


#***************************************************************************************************
# CLOUD profile "configure-datasource-for-cloud"
#***************************************************************************************************

---
spring:
  # MUST RENAME this profile to "cloud" to when deploy app to CF - 
  # This is because this profile uses cloud credentials, and if it is named other than "cloud"
  # the VCAP_SERVICE values will not be available for this profile
  # profiles: configure-datasource-for-cloud 
  
  profiles: cloud
  jpa:
    generate-ddl: true
  datasource:
    # from this: https://www.javacodegeeks.com/2016/05/approaches-binding-spring-boot-application-service-cloud-foundry.html
    # url, username, password are from "cf env war-ztdd-rest-unittest-2-boot-to-CF"
    # When the app is deployed in Cloud Foundry, the following class will read in url, username, password
    # to create the correct DataSource with correct connection properties like max active connections
    # @Configuration
    # @Profile("cloud")
    # public class RelationalCloudDataSourceConfigBeth {  .... }
      
    # https://www.javacodegeeks.com/2016/05/approaches-binding-spring-boot-application-service-cloud-foundry.html  
    url: ${vcap.services.p-mysql.credentials.jdbcUrl}  
    username: ${vcap.services.p-mysql.credentials.username}
    #password: ${vcap.services.p-mysql.credentials.password}   
    password: abc  

    # Search in "dependency" tab of pom.xml, I found Tomcat jar, and so, by default
    # spring-boot uses Tomcat connection pool. 
    # I set the connection pool size as below (type in spring.datasource.tomcat, the popup will suggest the options)
    # https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-sql.html#boot-features-connect-to-production-database
    # https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
    tomcat:
      min-idle: 5      # injected using setter of minIdle
      max-active: 9    # injected using setter of maxActive
      max-wait: 3000   # injected using setter of maxWait
      #minIdle: 5
      #maxActive: 9
      #maxWait: 3000      
    # apache commons-dbcp connection pool properties
    # https://commons.apache.org/proper/commons-dbcp/configuration.html
    # search for "max-total"      
    # I do not have commons-dbcp2 in classpath of pom.xml
    # dbcp2:
    #   max-total: 50  

    
logging:
  level:
    com.beth.tdd.ztddmvc: DEBUG                  
